//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/Cangrejo Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CangrejoInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CangrejoInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Cangrejo Inputs"",
    ""maps"": [
        {
            ""name"": ""Cangrejo"",
            ""id"": ""a03af2c4-c906-4628-ac46-18c7b1afa63d"",
            ""actions"": [
                {
                    ""name"": ""Movimiento"",
                    ""type"": ""PassThrough"",
                    ""id"": ""109546c1-3f4e-47ed-81bb-eef45cad1dbb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Salto"",
                    ""type"": ""Button"",
                    ""id"": ""1ca4849b-039c-4cf3-81d1-9f26d01b1364"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""032e63a6-08ad-400e-85f5-b2f5b686a6e8"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ad5c1f68-f499-4a81-b4c3-1a40ee9acdaf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""36749fae-8660-4b47-ba54-8181efde43fe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d57ed69d-e56b-4708-8cc7-883cc5268bf7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Salto"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cangrejo
        m_Cangrejo = asset.FindActionMap("Cangrejo", throwIfNotFound: true);
        m_Cangrejo_Movimiento = m_Cangrejo.FindAction("Movimiento", throwIfNotFound: true);
        m_Cangrejo_Salto = m_Cangrejo.FindAction("Salto", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cangrejo
    private readonly InputActionMap m_Cangrejo;
    private List<ICangrejoActions> m_CangrejoActionsCallbackInterfaces = new List<ICangrejoActions>();
    private readonly InputAction m_Cangrejo_Movimiento;
    private readonly InputAction m_Cangrejo_Salto;
    public struct CangrejoActions
    {
        private @CangrejoInputs m_Wrapper;
        public CangrejoActions(@CangrejoInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movimiento => m_Wrapper.m_Cangrejo_Movimiento;
        public InputAction @Salto => m_Wrapper.m_Cangrejo_Salto;
        public InputActionMap Get() { return m_Wrapper.m_Cangrejo; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CangrejoActions set) { return set.Get(); }
        public void AddCallbacks(ICangrejoActions instance)
        {
            if (instance == null || m_Wrapper.m_CangrejoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CangrejoActionsCallbackInterfaces.Add(instance);
            @Movimiento.started += instance.OnMovimiento;
            @Movimiento.performed += instance.OnMovimiento;
            @Movimiento.canceled += instance.OnMovimiento;
            @Salto.started += instance.OnSalto;
            @Salto.performed += instance.OnSalto;
            @Salto.canceled += instance.OnSalto;
        }

        private void UnregisterCallbacks(ICangrejoActions instance)
        {
            @Movimiento.started -= instance.OnMovimiento;
            @Movimiento.performed -= instance.OnMovimiento;
            @Movimiento.canceled -= instance.OnMovimiento;
            @Salto.started -= instance.OnSalto;
            @Salto.performed -= instance.OnSalto;
            @Salto.canceled -= instance.OnSalto;
        }

        public void RemoveCallbacks(ICangrejoActions instance)
        {
            if (m_Wrapper.m_CangrejoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICangrejoActions instance)
        {
            foreach (var item in m_Wrapper.m_CangrejoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CangrejoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CangrejoActions @Cangrejo => new CangrejoActions(this);
    public interface ICangrejoActions
    {
        void OnMovimiento(InputAction.CallbackContext context);
        void OnSalto(InputAction.CallbackContext context);
    }
}
